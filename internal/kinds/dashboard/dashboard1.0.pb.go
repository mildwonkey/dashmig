// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: dashboard/dashboard1.0.proto

package dashboard

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MappingType int32

const (
	MappingType_MappingType_INVALID MappingType = 0
	MappingType_Value               MappingType = 1
	MappingType_Range               MappingType = 2
	MappingType_Regex               MappingType = 3
	MappingType_Special             MappingType = 4
)

// Enum value maps for MappingType.
var (
	MappingType_name = map[int32]string{
		0: "MappingType_INVALID",
		1: "Value",
		2: "Range",
		3: "Regex",
		4: "Special",
	}
	MappingType_value = map[string]int32{
		"MappingType_INVALID": 0,
		"Value":               1,
		"Range":               2,
		"Regex":               3,
		"Special":             4,
	}
)

func (x MappingType) Enum() *MappingType {
	p := new(MappingType)
	*p = x
	return p
}

func (x MappingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MappingType) Descriptor() protoreflect.EnumDescriptor {
	return file_dashboard_dashboard1_0_proto_enumTypes[0].Descriptor()
}

func (MappingType) Type() protoreflect.EnumType {
	return &file_dashboard_dashboard1_0_proto_enumTypes[0]
}

func (x MappingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MappingType.Descriptor instead.
func (MappingType) EnumDescriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{0}
}

type DashboardCursorSync_Value int32

const (
	DashboardCursorSync_INVALID   DashboardCursorSync_Value = 0
	DashboardCursorSync_Off       DashboardCursorSync_Value = 1
	DashboardCursorSync_Crosshair DashboardCursorSync_Value = 2
	DashboardCursorSync_Tooltip   DashboardCursorSync_Value = 3
)

// Enum value maps for DashboardCursorSync_Value.
var (
	DashboardCursorSync_Value_name = map[int32]string{
		0: "INVALID",
		1: "Off",
		2: "Crosshair",
		3: "Tooltip",
	}
	DashboardCursorSync_Value_value = map[string]int32{
		"INVALID":   0,
		"Off":       1,
		"Crosshair": 2,
		"Tooltip":   3,
	}
)

func (x DashboardCursorSync_Value) Enum() *DashboardCursorSync_Value {
	p := new(DashboardCursorSync_Value)
	*p = x
	return p
}

func (x DashboardCursorSync_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DashboardCursorSync_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_dashboard_dashboard1_0_proto_enumTypes[1].Descriptor()
}

func (DashboardCursorSync_Value) Type() protoreflect.EnumType {
	return &file_dashboard_dashboard1_0_proto_enumTypes[1]
}

func (x DashboardCursorSync_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DashboardCursorSync_Value.Descriptor instead.
func (DashboardCursorSync_Value) EnumDescriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{2, 0}
}

type VariableModel_VariableType int32

const (
	VariableModel_VariableType_INVALID VariableModel_VariableType = 0
	VariableModel_Query                VariableModel_VariableType = 1
	VariableModel_Custom               VariableModel_VariableType = 2
	VariableModel_Datasource           VariableModel_VariableType = 3
	VariableModel_Constant             VariableModel_VariableType = 4
	VariableModel_Interval             VariableModel_VariableType = 5
)

// Enum value maps for VariableModel_VariableType.
var (
	VariableModel_VariableType_name = map[int32]string{
		0: "VariableType_INVALID",
		1: "Query",
		2: "Custom",
		3: "Datasource",
		4: "Constant",
		5: "Interval",
	}
	VariableModel_VariableType_value = map[string]int32{
		"VariableType_INVALID": 0,
		"Query":                1,
		"Custom":               2,
		"Datasource":           3,
		"Constant":             4,
		"Interval":             5,
	}
)

func (x VariableModel_VariableType) Enum() *VariableModel_VariableType {
	p := new(VariableModel_VariableType)
	*p = x
	return p
}

func (x VariableModel_VariableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariableModel_VariableType) Descriptor() protoreflect.EnumDescriptor {
	return file_dashboard_dashboard1_0_proto_enumTypes[2].Descriptor()
}

func (VariableModel_VariableType) Type() protoreflect.EnumType {
	return &file_dashboard_dashboard1_0_proto_enumTypes[2]
}

func (x VariableModel_VariableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariableModel_VariableType.Descriptor instead.
func (VariableModel_VariableType) EnumDescriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{10, 0}
}

type VariableModel_VariableHide int32

const (
	VariableModel_VariableHide_INVALID VariableModel_VariableHide = 0
	VariableModel_Label                VariableModel_VariableHide = 1
	VariableModel_Variable             VariableModel_VariableHide = 2
	VariableModel_Both                 VariableModel_VariableHide = 3
	VariableModel_None                 VariableModel_VariableHide = 4
)

// Enum value maps for VariableModel_VariableHide.
var (
	VariableModel_VariableHide_name = map[int32]string{
		0: "VariableHide_INVALID",
		1: "Label",
		2: "Variable",
		3: "Both",
		4: "None",
	}
	VariableModel_VariableHide_value = map[string]int32{
		"VariableHide_INVALID": 0,
		"Label":                1,
		"Variable":             2,
		"Both":                 3,
		"None":                 4,
	}
)

func (x VariableModel_VariableHide) Enum() *VariableModel_VariableHide {
	p := new(VariableModel_VariableHide)
	*p = x
	return p
}

func (x VariableModel_VariableHide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariableModel_VariableHide) Descriptor() protoreflect.EnumDescriptor {
	return file_dashboard_dashboard1_0_proto_enumTypes[3].Descriptor()
}

func (VariableModel_VariableHide) Type() protoreflect.EnumType {
	return &file_dashboard_dashboard1_0_proto_enumTypes[3]
}

func (x VariableModel_VariableHide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariableModel_VariableHide.Descriptor instead.
func (VariableModel_VariableHide) EnumDescriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{10, 1}
}

type VariableModel_VariableRefresh int32

const (
	VariableModel_VariableRefresh_INVALID   VariableModel_VariableRefresh = 0
	VariableModel_Never                     VariableModel_VariableRefresh = 1
	VariableModel_OnTimeRangeChanged        VariableModel_VariableRefresh = 2
	VariableModel_OnDashboardLoad           VariableModel_VariableRefresh = 3
	VariableModel_OnTimeRangeChangedAndLoad VariableModel_VariableRefresh = 4
)

// Enum value maps for VariableModel_VariableRefresh.
var (
	VariableModel_VariableRefresh_name = map[int32]string{
		0: "VariableRefresh_INVALID",
		1: "Never",
		2: "OnTimeRangeChanged",
		3: "OnDashboardLoad",
		4: "OnTimeRangeChangedAndLoad",
	}
	VariableModel_VariableRefresh_value = map[string]int32{
		"VariableRefresh_INVALID":   0,
		"Never":                     1,
		"OnTimeRangeChanged":        2,
		"OnDashboardLoad":           3,
		"OnTimeRangeChangedAndLoad": 4,
	}
)

func (x VariableModel_VariableRefresh) Enum() *VariableModel_VariableRefresh {
	p := new(VariableModel_VariableRefresh)
	*p = x
	return p
}

func (x VariableModel_VariableRefresh) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariableModel_VariableRefresh) Descriptor() protoreflect.EnumDescriptor {
	return file_dashboard_dashboard1_0_proto_enumTypes[4].Descriptor()
}

func (VariableModel_VariableRefresh) Type() protoreflect.EnumType {
	return &file_dashboard_dashboard1_0_proto_enumTypes[4]
}

func (x VariableModel_VariableRefresh) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariableModel_VariableRefresh.Descriptor instead.
func (VariableModel_VariableRefresh) EnumDescriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{10, 2}
}

type DashboardLink_DashboardLinkType int32

const (
	DashboardLink_INVALID    DashboardLink_DashboardLinkType = 0
	DashboardLink_Link       DashboardLink_DashboardLinkType = 1
	DashboardLink_Dashboards DashboardLink_DashboardLinkType = 2
)

// Enum value maps for DashboardLink_DashboardLinkType.
var (
	DashboardLink_DashboardLinkType_name = map[int32]string{
		0: "INVALID",
		1: "Link",
		2: "Dashboards",
	}
	DashboardLink_DashboardLinkType_value = map[string]int32{
		"INVALID":    0,
		"Link":       1,
		"Dashboards": 2,
	}
)

func (x DashboardLink_DashboardLinkType) Enum() *DashboardLink_DashboardLinkType {
	p := new(DashboardLink_DashboardLinkType)
	*p = x
	return p
}

func (x DashboardLink_DashboardLinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DashboardLink_DashboardLinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_dashboard_dashboard1_0_proto_enumTypes[5].Descriptor()
}

func (DashboardLink_DashboardLinkType) Type() protoreflect.EnumType {
	return &file_dashboard_dashboard1_0_proto_enumTypes[5]
}

func (x DashboardLink_DashboardLinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DashboardLink_DashboardLinkType.Descriptor instead.
func (DashboardLink_DashboardLinkType) EnumDescriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{12, 0}
}

type FieldColor_FieldColorModeId int32

const (
	FieldColor_FieldColorModeId_INVALID FieldColor_FieldColorModeId = 0
	FieldColor_Thresholds               FieldColor_FieldColorModeId = 1
	FieldColor_PaletteClassic           FieldColor_FieldColorModeId = 2
	FieldColor_PaletteClassicByName     FieldColor_FieldColorModeId = 3
	FieldColor_ContinuousGrYlRd         FieldColor_FieldColorModeId = 4
	FieldColor_ContinuousRdYlGr         FieldColor_FieldColorModeId = 5
	FieldColor_ContinuousBlYlRd         FieldColor_FieldColorModeId = 6
)

// Enum value maps for FieldColor_FieldColorModeId.
var (
	FieldColor_FieldColorModeId_name = map[int32]string{
		0: "FieldColorModeId_INVALID",
		1: "Thresholds",
		2: "PaletteClassic",
		3: "PaletteClassicByName",
		4: "ContinuousGrYlRd",
		5: "ContinuousRdYlGr",
		6: "ContinuousBlYlRd",
	}
	FieldColor_FieldColorModeId_value = map[string]int32{
		"FieldColorModeId_INVALID": 0,
		"Thresholds":               1,
		"PaletteClassic":           2,
		"PaletteClassicByName":     3,
		"ContinuousGrYlRd":         4,
		"ContinuousRdYlGr":         5,
		"ContinuousBlYlRd":         6,
	}
)

func (x FieldColor_FieldColorModeId) Enum() *FieldColor_FieldColorModeId {
	p := new(FieldColor_FieldColorModeId)
	*p = x
	return p
}

func (x FieldColor_FieldColorModeId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldColor_FieldColorModeId) Descriptor() protoreflect.EnumDescriptor {
	return file_dashboard_dashboard1_0_proto_enumTypes[6].Descriptor()
}

func (FieldColor_FieldColorModeId) Type() protoreflect.EnumType {
	return &file_dashboard_dashboard1_0_proto_enumTypes[6]
}

func (x FieldColor_FieldColorModeId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldColor_FieldColorModeId.Descriptor instead.
func (FieldColor_FieldColorModeId) EnumDescriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{13, 0}
}

type FieldColor_FieldColorSeriesByMode int32

const (
	FieldColor_FieldColorSeriesByMode_INVALID FieldColor_FieldColorSeriesByMode = 0
	FieldColor_Name                           FieldColor_FieldColorSeriesByMode = 1
	FieldColor_Index                          FieldColor_FieldColorSeriesByMode = 2
)

// Enum value maps for FieldColor_FieldColorSeriesByMode.
var (
	FieldColor_FieldColorSeriesByMode_name = map[int32]string{
		0: "FieldColorSeriesByMode_INVALID",
		1: "Name",
		2: "Index",
	}
	FieldColor_FieldColorSeriesByMode_value = map[string]int32{
		"FieldColorSeriesByMode_INVALID": 0,
		"Name":                           1,
		"Index":                          2,
	}
)

func (x FieldColor_FieldColorSeriesByMode) Enum() *FieldColor_FieldColorSeriesByMode {
	p := new(FieldColor_FieldColorSeriesByMode)
	*p = x
	return p
}

func (x FieldColor_FieldColorSeriesByMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldColor_FieldColorSeriesByMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dashboard_dashboard1_0_proto_enumTypes[7].Descriptor()
}

func (FieldColor_FieldColorSeriesByMode) Type() protoreflect.EnumType {
	return &file_dashboard_dashboard1_0_proto_enumTypes[7]
}

func (x FieldColor_FieldColorSeriesByMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldColor_FieldColorSeriesByMode.Descriptor instead.
func (FieldColor_FieldColorSeriesByMode) EnumDescriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{13, 1}
}

type ThresholdsConfig_ThresholdsMode int32

const (
	ThresholdsConfig_INVALID    ThresholdsConfig_ThresholdsMode = 0
	ThresholdsConfig_Absolute   ThresholdsConfig_ThresholdsMode = 1
	ThresholdsConfig_Percentage ThresholdsConfig_ThresholdsMode = 2
)

// Enum value maps for ThresholdsConfig_ThresholdsMode.
var (
	ThresholdsConfig_ThresholdsMode_name = map[int32]string{
		0: "INVALID",
		1: "Absolute",
		2: "Percentage",
	}
	ThresholdsConfig_ThresholdsMode_value = map[string]int32{
		"INVALID":    0,
		"Absolute":   1,
		"Percentage": 2,
	}
)

func (x ThresholdsConfig_ThresholdsMode) Enum() *ThresholdsConfig_ThresholdsMode {
	p := new(ThresholdsConfig_ThresholdsMode)
	*p = x
	return p
}

func (x ThresholdsConfig_ThresholdsMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThresholdsConfig_ThresholdsMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dashboard_dashboard1_0_proto_enumTypes[8].Descriptor()
}

func (ThresholdsConfig_ThresholdsMode) Type() protoreflect.EnumType {
	return &file_dashboard_dashboard1_0_proto_enumTypes[8]
}

func (x ThresholdsConfig_ThresholdsMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThresholdsConfig_ThresholdsMode.Descriptor instead.
func (ThresholdsConfig_ThresholdsMode) EnumDescriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{16, 0}
}

type SpecialValueMap_SpecialValueMatch int32

const (
	SpecialValueMap_SpecialValueMatch_INVALID SpecialValueMap_SpecialValueMatch = 0
	SpecialValueMap_True                      SpecialValueMap_SpecialValueMatch = 1
	SpecialValueMap_False                     SpecialValueMap_SpecialValueMatch = 2
	SpecialValueMap_Null                      SpecialValueMap_SpecialValueMatch = 3
	SpecialValueMap_NaN                       SpecialValueMap_SpecialValueMatch = 4
	SpecialValueMap_NullAndNan                SpecialValueMap_SpecialValueMatch = 5
	SpecialValueMap_Empty                     SpecialValueMap_SpecialValueMatch = 6
)

// Enum value maps for SpecialValueMap_SpecialValueMatch.
var (
	SpecialValueMap_SpecialValueMatch_name = map[int32]string{
		0: "SpecialValueMatch_INVALID",
		1: "True",
		2: "False",
		3: "Null",
		4: "NaN",
		5: "NullAndNan",
		6: "Empty",
	}
	SpecialValueMap_SpecialValueMatch_value = map[string]int32{
		"SpecialValueMatch_INVALID": 0,
		"True":                      1,
		"False":                     2,
		"Null":                      3,
		"NaN":                       4,
		"NullAndNan":                5,
		"Empty":                     6,
	}
)

func (x SpecialValueMap_SpecialValueMatch) Enum() *SpecialValueMap_SpecialValueMatch {
	p := new(SpecialValueMap_SpecialValueMatch)
	*p = x
	return p
}

func (x SpecialValueMap_SpecialValueMatch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecialValueMap_SpecialValueMatch) Descriptor() protoreflect.EnumDescriptor {
	return file_dashboard_dashboard1_0_proto_enumTypes[9].Descriptor()
}

func (SpecialValueMap_SpecialValueMatch) Type() protoreflect.EnumType {
	return &file_dashboard_dashboard1_0_proto_enumTypes[9]
}

func (x SpecialValueMap_SpecialValueMatch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecialValueMap_SpecialValueMatch.Descriptor instead.
func (SpecialValueMap_SpecialValueMatch) EnumDescriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{21, 0}
}

// this may be over engineered; I'm trying to be as flexible as possible until I
// have a better idea what's used and where
type DynamicValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msgpack []byte `protobuf:"bytes,1,opt,name=msgpack,proto3" json:"msgpack,omitempty"`
	Json    []byte `protobuf:"bytes,2,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *DynamicValue) Reset() {
	*x = DynamicValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicValue) ProtoMessage() {}

func (x *DynamicValue) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicValue.ProtoReflect.Descriptor instead.
func (*DynamicValue) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{0}
}

func (x *DynamicValue) GetMsgpack() []byte {
	if x != nil {
		return x.Msgpack
	}
	return nil
}

func (x *DynamicValue) GetJson() []byte {
	if x != nil {
		return x.Json
	}
	return nil
}

type Dashboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int64                `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Uid                  *string               `protobuf:"bytes,2,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	Title                *string               `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description          *string               `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Revision             *int64                `protobuf:"varint,5,opt,name=revision,proto3,oneof" json:"revision,omitempty"`
	GnetId               *string               `protobuf:"bytes,6,opt,name=gnetId,proto3,oneof" json:"gnetId,omitempty"`
	Tags                 []string              `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Style                *string               `protobuf:"bytes,8,opt,name=style,proto3,oneof" json:"style,omitempty"`
	Timezone             *string               `protobuf:"bytes,9,opt,name=timezone,proto3,oneof" json:"timezone,omitempty"`
	Editable             bool                  `protobuf:"varint,10,opt,name=editable,proto3" json:"editable,omitempty"`
	GraphTooltip         *DashboardCursorSync  `protobuf:"bytes,11,opt,name=graphTooltip,proto3" json:"graphTooltip,omitempty"`
	Time                 *TimeRange            `protobuf:"bytes,12,opt,name=time,proto3,oneof" json:"time,omitempty"`
	Timepicker           *TimePicker           `protobuf:"bytes,13,opt,name=timepicker,proto3,oneof" json:"timepicker,omitempty"`
	FiscalYearStartMonth *uint32               `protobuf:"varint,14,opt,name=fiscalYearStartMonth,proto3,oneof" json:"fiscalYearStartMonth,omitempty"`
	LiveNow              *bool                 `protobuf:"varint,15,opt,name=liveNow,proto3,oneof" json:"liveNow,omitempty"`
	WeekStart            *string               `protobuf:"bytes,16,opt,name=weekStart,proto3,oneof" json:"weekStart,omitempty"`
	Refresh              *string               `protobuf:"bytes,17,opt,name=refresh,proto3,oneof" json:"refresh,omitempty"`
	SchemaVersion        *uint32               `protobuf:"varint,18,opt,name=schemaVersion,proto3,oneof" json:"schemaVersion,omitempty"`
	Version              *uint32               `protobuf:"varint,19,opt,name=version,proto3,oneof" json:"version,omitempty"`
	Panels               []*PanelType          `protobuf:"bytes,20,rep,name=panels,proto3" json:"panels,omitempty"`
	Templating           *Dashboard_Templating `protobuf:"bytes,21,opt,name=templating,proto3,oneof" json:"templating,omitempty"`
	Annotations          *AnnotationContainer  `protobuf:"bytes,22,opt,name=annotations,proto3,oneof" json:"annotations,omitempty"`
	Links                *DashboardLink        `protobuf:"bytes,23,opt,name=links,proto3,oneof" json:"links,omitempty"`
	Snapshot             *Snapshot             `protobuf:"bytes,24,opt,name=snapshot,proto3,oneof" json:"snapshot,omitempty"`
}

func (x *Dashboard) Reset() {
	*x = Dashboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dashboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dashboard) ProtoMessage() {}

func (x *Dashboard) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dashboard.ProtoReflect.Descriptor instead.
func (*Dashboard) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{1}
}

func (x *Dashboard) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Dashboard) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *Dashboard) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Dashboard) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Dashboard) GetRevision() int64 {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return 0
}

func (x *Dashboard) GetGnetId() string {
	if x != nil && x.GnetId != nil {
		return *x.GnetId
	}
	return ""
}

func (x *Dashboard) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Dashboard) GetStyle() string {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return ""
}

func (x *Dashboard) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

func (x *Dashboard) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *Dashboard) GetGraphTooltip() *DashboardCursorSync {
	if x != nil {
		return x.GraphTooltip
	}
	return nil
}

func (x *Dashboard) GetTime() *TimeRange {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Dashboard) GetTimepicker() *TimePicker {
	if x != nil {
		return x.Timepicker
	}
	return nil
}

func (x *Dashboard) GetFiscalYearStartMonth() uint32 {
	if x != nil && x.FiscalYearStartMonth != nil {
		return *x.FiscalYearStartMonth
	}
	return 0
}

func (x *Dashboard) GetLiveNow() bool {
	if x != nil && x.LiveNow != nil {
		return *x.LiveNow
	}
	return false
}

func (x *Dashboard) GetWeekStart() string {
	if x != nil && x.WeekStart != nil {
		return *x.WeekStart
	}
	return ""
}

func (x *Dashboard) GetRefresh() string {
	if x != nil && x.Refresh != nil {
		return *x.Refresh
	}
	return ""
}

func (x *Dashboard) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *Dashboard) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Dashboard) GetPanels() []*PanelType {
	if x != nil {
		return x.Panels
	}
	return nil
}

func (x *Dashboard) GetTemplating() *Dashboard_Templating {
	if x != nil {
		return x.Templating
	}
	return nil
}

func (x *Dashboard) GetAnnotations() *AnnotationContainer {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Dashboard) GetLinks() *DashboardLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Dashboard) GetSnapshot() *Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type DashboardCursorSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *DashboardCursorSync_Value `protobuf:"varint,1,opt,name=value,proto3,enum=dashboard1.DashboardCursorSync_Value,oneof" json:"value,omitempty"`
}

func (x *DashboardCursorSync) Reset() {
	*x = DashboardCursorSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardCursorSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardCursorSync) ProtoMessage() {}

func (x *DashboardCursorSync) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardCursorSync.ProtoReflect.Descriptor instead.
func (*DashboardCursorSync) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{2}
}

func (x *DashboardCursorSync) GetValue() DashboardCursorSync_Value {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return DashboardCursorSync_INVALID
}

type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *string `protobuf:"bytes,1,opt,name=from,proto3,oneof" json:"from,omitempty"`
	To   *string `protobuf:"bytes,2,opt,name=to,proto3,oneof" json:"to,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{3}
}

func (x *TimeRange) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *TimeRange) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

type TimePicker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hidden           *bool    `protobuf:"varint,1,opt,name=hidden,proto3,oneof" json:"hidden,omitempty"`
	RefreshIntervals []string `protobuf:"bytes,2,rep,name=refresh_intervals,json=refreshIntervals,proto3" json:"refresh_intervals,omitempty"`
	Collapse         *bool    `protobuf:"varint,3,opt,name=collapse,proto3,oneof" json:"collapse,omitempty"`
	Enable           *bool    `protobuf:"varint,4,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	TimeOptions      []string `protobuf:"bytes,5,rep,name=time_options,json=timeOptions,proto3" json:"time_options,omitempty"`
}

func (x *TimePicker) Reset() {
	*x = TimePicker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimePicker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimePicker) ProtoMessage() {}

func (x *TimePicker) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimePicker.ProtoReflect.Descriptor instead.
func (*TimePicker) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{4}
}

func (x *TimePicker) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *TimePicker) GetRefreshIntervals() []string {
	if x != nil {
		return x.RefreshIntervals
	}
	return nil
}

func (x *TimePicker) GetCollapse() bool {
	if x != nil && x.Collapse != nil {
		return *x.Collapse
	}
	return false
}

func (x *TimePicker) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *TimePicker) GetTimeOptions() []string {
	if x != nil {
		return x.TimeOptions
	}
	return nil
}

type PanelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Selector:
	//
	//	*PanelType_Panel
	//	*PanelType_RowPanel
	//	*PanelType_GraphPanel
	//	*PanelType_HeatmapPanel
	Selector isPanelType_Selector `protobuf_oneof:"selector"`
}

func (x *PanelType) Reset() {
	*x = PanelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PanelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PanelType) ProtoMessage() {}

func (x *PanelType) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PanelType.ProtoReflect.Descriptor instead.
func (*PanelType) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{5}
}

func (m *PanelType) GetSelector() isPanelType_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (x *PanelType) GetPanel() *Panel {
	if x, ok := x.GetSelector().(*PanelType_Panel); ok {
		return x.Panel
	}
	return nil
}

func (x *PanelType) GetRowPanel() *RowPanel {
	if x, ok := x.GetSelector().(*PanelType_RowPanel); ok {
		return x.RowPanel
	}
	return nil
}

func (x *PanelType) GetGraphPanel() *GraphPanel {
	if x, ok := x.GetSelector().(*PanelType_GraphPanel); ok {
		return x.GraphPanel
	}
	return nil
}

func (x *PanelType) GetHeatmapPanel() *HeatmapPanel {
	if x, ok := x.GetSelector().(*PanelType_HeatmapPanel); ok {
		return x.HeatmapPanel
	}
	return nil
}

type isPanelType_Selector interface {
	isPanelType_Selector()
}

type PanelType_Panel struct {
	Panel *Panel `protobuf:"bytes,1,opt,name=panel,proto3,oneof"`
}

type PanelType_RowPanel struct {
	RowPanel *RowPanel `protobuf:"bytes,2,opt,name=row_panel,json=rowPanel,proto3,oneof"`
}

type PanelType_GraphPanel struct {
	GraphPanel *GraphPanel `protobuf:"bytes,3,opt,name=graph_panel,json=graphPanel,proto3,oneof"`
}

type PanelType_HeatmapPanel struct {
	HeatmapPanel *HeatmapPanel `protobuf:"bytes,4,opt,name=heatmap_panel,json=heatmapPanel,proto3,oneof"`
}

func (*PanelType_Panel) isPanelType_Selector() {}

func (*PanelType_RowPanel) isPanelType_Selector() {}

func (*PanelType_GraphPanel) isPanelType_Selector() {}

func (*PanelType_HeatmapPanel) isPanelType_Selector() {}

type Panel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            string                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id              *uint32                  `protobuf:"varint,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	PluginVersion   *string                  `protobuf:"bytes,3,opt,name=pluginVersion,proto3,oneof" json:"pluginVersion,omitempty"`
	Tags            []string                 `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Targets         []*Target                `protobuf:"bytes,5,rep,name=targets,proto3" json:"targets,omitempty"`
	Title           *string                  `protobuf:"bytes,6,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description     *string                  `protobuf:"bytes,7,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Transparent     *bool                    `protobuf:"varint,8,opt,name=transparent,proto3,oneof" json:"transparent,omitempty"`
	Datasource      *DataSourceRef           `protobuf:"bytes,9,opt,name=datasource,proto3,oneof" json:"datasource,omitempty"`
	GridPos         *GridPos                 `protobuf:"bytes,10,opt,name=gridPos,proto3,oneof" json:"gridPos,omitempty"`
	Links           []*DashboardLink         `protobuf:"bytes,11,rep,name=links,proto3" json:"links,omitempty"`
	Repeat          *string                  `protobuf:"bytes,12,opt,name=repeat,proto3,oneof" json:"repeat,omitempty"`
	RepeatDirection *string                  `protobuf:"bytes,13,opt,name=repeatDirection,proto3,oneof" json:"repeatDirection,omitempty"`
	RepeatPanelId   *int64                   `protobuf:"varint,14,opt,name=repeatPanelId,proto3,oneof" json:"repeatPanelId,omitempty"`
	MaxDataPoints   *int64                   `protobuf:"varint,15,opt,name=maxDataPoints,proto3,oneof" json:"maxDataPoints,omitempty"`
	Transformations []*DataTransformerConfig `protobuf:"bytes,16,rep,name=transformations,proto3" json:"transformations,omitempty"`
	Interval        *string                  `protobuf:"bytes,17,opt,name=interval,proto3,oneof" json:"interval,omitempty"`
	TimeFrom        *string                  `protobuf:"bytes,18,opt,name=timeFrom,proto3,oneof" json:"timeFrom,omitempty"`
	TimeShift       *string                  `protobuf:"bytes,19,opt,name=timeShift,proto3,oneof" json:"timeShift,omitempty"`
	LibraryPanel    *LibraryPanelRef         `protobuf:"bytes,20,opt,name=libraryPanel,proto3,oneof" json:"libraryPanel,omitempty"`
	// not sure about options!
	// in cue: options: {...}
	Options     *DynamicValue `protobuf:"bytes,21,opt,name=options,proto3,oneof" json:"options,omitempty"`
	FieldConfig *string       `protobuf:"bytes,22,opt,name=fieldConfig,proto3,oneof" json:"fieldConfig,omitempty"`
}

func (x *Panel) Reset() {
	*x = Panel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Panel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Panel) ProtoMessage() {}

func (x *Panel) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Panel.ProtoReflect.Descriptor instead.
func (*Panel) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{6}
}

func (x *Panel) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Panel) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Panel) GetPluginVersion() string {
	if x != nil && x.PluginVersion != nil {
		return *x.PluginVersion
	}
	return ""
}

func (x *Panel) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Panel) GetTargets() []*Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Panel) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Panel) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Panel) GetTransparent() bool {
	if x != nil && x.Transparent != nil {
		return *x.Transparent
	}
	return false
}

func (x *Panel) GetDatasource() *DataSourceRef {
	if x != nil {
		return x.Datasource
	}
	return nil
}

func (x *Panel) GetGridPos() *GridPos {
	if x != nil {
		return x.GridPos
	}
	return nil
}

func (x *Panel) GetLinks() []*DashboardLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Panel) GetRepeat() string {
	if x != nil && x.Repeat != nil {
		return *x.Repeat
	}
	return ""
}

func (x *Panel) GetRepeatDirection() string {
	if x != nil && x.RepeatDirection != nil {
		return *x.RepeatDirection
	}
	return ""
}

func (x *Panel) GetRepeatPanelId() int64 {
	if x != nil && x.RepeatPanelId != nil {
		return *x.RepeatPanelId
	}
	return 0
}

func (x *Panel) GetMaxDataPoints() int64 {
	if x != nil && x.MaxDataPoints != nil {
		return *x.MaxDataPoints
	}
	return 0
}

func (x *Panel) GetTransformations() []*DataTransformerConfig {
	if x != nil {
		return x.Transformations
	}
	return nil
}

func (x *Panel) GetInterval() string {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return ""
}

func (x *Panel) GetTimeFrom() string {
	if x != nil && x.TimeFrom != nil {
		return *x.TimeFrom
	}
	return ""
}

func (x *Panel) GetTimeShift() string {
	if x != nil && x.TimeShift != nil {
		return *x.TimeShift
	}
	return ""
}

func (x *Panel) GetLibraryPanel() *LibraryPanelRef {
	if x != nil {
		return x.LibraryPanel
	}
	return nil
}

func (x *Panel) GetOptions() *DynamicValue {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Panel) GetFieldConfig() string {
	if x != nil && x.FieldConfig != nil {
		return *x.FieldConfig
	}
	return ""
}

type AnnotationTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit    int64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	MatchAny bool     `protobuf:"varint,2,opt,name=matchAny,proto3" json:"matchAny,omitempty"`
	Tags     []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Type     string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AnnotationTarget) Reset() {
	*x = AnnotationTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationTarget) ProtoMessage() {}

func (x *AnnotationTarget) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationTarget.ProtoReflect.Descriptor instead.
func (*AnnotationTarget) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{7}
}

func (x *AnnotationTarget) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AnnotationTarget) GetMatchAny() bool {
	if x != nil {
		return x.MatchAny
	}
	return false
}

func (x *AnnotationTarget) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AnnotationTarget) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type AnnotationPanelFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exclude *bool    `protobuf:"varint,1,opt,name=exclude,proto3,oneof" json:"exclude,omitempty"`
	Ids     []uint32 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *AnnotationPanelFilter) Reset() {
	*x = AnnotationPanelFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationPanelFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationPanelFilter) ProtoMessage() {}

func (x *AnnotationPanelFilter) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationPanelFilter.ProtoReflect.Descriptor instead.
func (*AnnotationPanelFilter) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{8}
}

func (x *AnnotationPanelFilter) GetExclude() bool {
	if x != nil && x.Exclude != nil {
		return *x.Exclude
	}
	return false
}

func (x *AnnotationPanelFilter) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type AnnotationContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*AnnotationContainer_AnnotationQuery `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AnnotationContainer) Reset() {
	*x = AnnotationContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationContainer) ProtoMessage() {}

func (x *AnnotationContainer) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationContainer.ProtoReflect.Descriptor instead.
func (*AnnotationContainer) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{9}
}

func (x *AnnotationContainer) GetList() []*AnnotationContainer_AnnotationQuery {
	if x != nil {
		return x.List
	}
	return nil
}

type VariableModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        VariableModel_VariableType      `protobuf:"varint,2,opt,name=type,proto3,enum=dashboard1.VariableModel_VariableType" json:"type,omitempty"`
	Name        string                          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Label       *string                         `protobuf:"bytes,4,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Hide        VariableModel_VariableHide      `protobuf:"varint,5,opt,name=hide,proto3,enum=dashboard1.VariableModel_VariableHide" json:"hide,omitempty"`
	SkipUrlSync bool                            `protobuf:"varint,6,opt,name=skipUrlSync,proto3" json:"skipUrlSync,omitempty"`
	Description *string                         `protobuf:"bytes,7,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Query       *string                         `protobuf:"bytes,8,opt,name=query,proto3,oneof" json:"query,omitempty"`
	Datasource  *DataSourceRef                  `protobuf:"bytes,9,opt,name=datasource,proto3,oneof" json:"datasource,omitempty"`
	AllFormat   *string                         `protobuf:"bytes,10,opt,name=allFormat,proto3,oneof" json:"allFormat,omitempty"`
	Current     *VariableModel_VariableOption   `protobuf:"bytes,11,opt,name=current,proto3,oneof" json:"current,omitempty"`
	Multi       *bool                           `protobuf:"varint,12,opt,name=multi,proto3,oneof" json:"multi,omitempty"`
	Options     []*VariableModel_VariableOption `protobuf:"bytes,13,rep,name=options,proto3" json:"options,omitempty"`
	Refresh     *VariableModel_VariableRefresh  `protobuf:"varint,14,opt,name=refresh,proto3,enum=dashboard1.VariableModel_VariableRefresh,oneof" json:"refresh,omitempty"`
}

func (x *VariableModel) Reset() {
	*x = VariableModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableModel) ProtoMessage() {}

func (x *VariableModel) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableModel.ProtoReflect.Descriptor instead.
func (*VariableModel) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{10}
}

func (x *VariableModel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VariableModel) GetType() VariableModel_VariableType {
	if x != nil {
		return x.Type
	}
	return VariableModel_VariableType_INVALID
}

func (x *VariableModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariableModel) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *VariableModel) GetHide() VariableModel_VariableHide {
	if x != nil {
		return x.Hide
	}
	return VariableModel_VariableHide_INVALID
}

func (x *VariableModel) GetSkipUrlSync() bool {
	if x != nil {
		return x.SkipUrlSync
	}
	return false
}

func (x *VariableModel) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *VariableModel) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *VariableModel) GetDatasource() *DataSourceRef {
	if x != nil {
		return x.Datasource
	}
	return nil
}

func (x *VariableModel) GetAllFormat() string {
	if x != nil && x.AllFormat != nil {
		return *x.AllFormat
	}
	return ""
}

func (x *VariableModel) GetCurrent() *VariableModel_VariableOption {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *VariableModel) GetMulti() bool {
	if x != nil && x.Multi != nil {
		return *x.Multi
	}
	return false
}

func (x *VariableModel) GetOptions() []*VariableModel_VariableOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *VariableModel) GetRefresh() VariableModel_VariableRefresh {
	if x != nil && x.Refresh != nil {
		return *x.Refresh
	}
	return VariableModel_VariableRefresh_INVALID
}

type DataSourceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Uid  *string `protobuf:"bytes,2,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
}

func (x *DataSourceRef) Reset() {
	*x = DataSourceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceRef) ProtoMessage() {}

func (x *DataSourceRef) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceRef.ProtoReflect.Descriptor instead.
func (*DataSourceRef) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{11}
}

func (x *DataSourceRef) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *DataSourceRef) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

type DashboardLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string                          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type        DashboardLink_DashboardLinkType `protobuf:"varint,2,opt,name=type,proto3,enum=dashboard1.DashboardLink_DashboardLinkType" json:"type,omitempty"`
	Icon        string                          `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Tooltip     string                          `protobuf:"bytes,4,opt,name=tooltip,proto3" json:"tooltip,omitempty"`
	Url         string                          `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Tags        []string                        `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	AsDropdown  bool                            `protobuf:"varint,7,opt,name=asDropdown,proto3" json:"asDropdown,omitempty"`
	TargetBlank bool                            `protobuf:"varint,8,opt,name=targetBlank,proto3" json:"targetBlank,omitempty"`
	IncludeVars bool                            `protobuf:"varint,9,opt,name=includeVars,proto3" json:"includeVars,omitempty"`
	KeepTime    bool                            `protobuf:"varint,10,opt,name=keepTime,proto3" json:"keepTime,omitempty"`
}

func (x *DashboardLink) Reset() {
	*x = DashboardLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardLink) ProtoMessage() {}

func (x *DashboardLink) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardLink.ProtoReflect.Descriptor instead.
func (*DashboardLink) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{12}
}

func (x *DashboardLink) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DashboardLink) GetType() DashboardLink_DashboardLinkType {
	if x != nil {
		return x.Type
	}
	return DashboardLink_INVALID
}

func (x *DashboardLink) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *DashboardLink) GetTooltip() string {
	if x != nil {
		return x.Tooltip
	}
	return ""
}

func (x *DashboardLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DashboardLink) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DashboardLink) GetAsDropdown() bool {
	if x != nil {
		return x.AsDropdown
	}
	return false
}

func (x *DashboardLink) GetTargetBlank() bool {
	if x != nil {
		return x.TargetBlank
	}
	return false
}

func (x *DashboardLink) GetIncludeVars() bool {
	if x != nil {
		return x.IncludeVars
	}
	return false
}

func (x *DashboardLink) GetKeepTime() bool {
	if x != nil {
		return x.KeepTime
	}
	return false
}

type FieldColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode       FieldColor_FieldColorModeId        `protobuf:"varint,1,opt,name=mode,proto3,enum=dashboard1.FieldColor_FieldColorModeId" json:"mode,omitempty"`
	FixedColor *string                            `protobuf:"bytes,2,opt,name=fixedColor,proto3,oneof" json:"fixedColor,omitempty"`
	SeriesBy   *FieldColor_FieldColorSeriesByMode `protobuf:"varint,3,opt,name=seriesBy,proto3,enum=dashboard1.FieldColor_FieldColorSeriesByMode,oneof" json:"seriesBy,omitempty"`
}

func (x *FieldColor) Reset() {
	*x = FieldColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldColor) ProtoMessage() {}

func (x *FieldColor) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldColor.ProtoReflect.Descriptor instead.
func (*FieldColor) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{13}
}

func (x *FieldColor) GetMode() FieldColor_FieldColorModeId {
	if x != nil {
		return x.Mode
	}
	return FieldColor_FieldColorModeId_INVALID
}

func (x *FieldColor) GetFixedColor() string {
	if x != nil && x.FixedColor != nil {
		return *x.FixedColor
	}
	return ""
}

func (x *FieldColor) GetSeriesBy() FieldColor_FieldColorSeriesByMode {
	if x != nil && x.SeriesBy != nil {
		return *x.SeriesBy
	}
	return FieldColor_FieldColorSeriesByMode_INVALID
}

type GridPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	H      uint32 `protobuf:"varint,1,opt,name=h,proto3" json:"h,omitempty"`
	W      uint32 `protobuf:"varint,2,opt,name=w,proto3" json:"w,omitempty"`
	X      uint32 `protobuf:"varint,3,opt,name=x,proto3" json:"x,omitempty"`
	Y      uint32 `protobuf:"varint,4,opt,name=y,proto3" json:"y,omitempty"`
	Static *bool  `protobuf:"varint,5,opt,name=static,proto3,oneof" json:"static,omitempty"`
}

func (x *GridPos) Reset() {
	*x = GridPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GridPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridPos) ProtoMessage() {}

func (x *GridPos) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridPos.ProtoReflect.Descriptor instead.
func (*GridPos) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{14}
}

func (x *GridPos) GetH() uint32 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *GridPos) GetW() uint32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *GridPos) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *GridPos) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *GridPos) GetStatic() bool {
	if x != nil && x.Static != nil {
		return *x.Static
	}
	return false
}

type Threshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	Color string  `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *Threshold) Reset() {
	*x = Threshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Threshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Threshold) ProtoMessage() {}

func (x *Threshold) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Threshold.ProtoReflect.Descriptor instead.
func (*Threshold) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{15}
}

func (x *Threshold) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Threshold) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type ThresholdsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode  ThresholdsConfig_ThresholdsMode `protobuf:"varint,1,opt,name=mode,proto3,enum=dashboard1.ThresholdsConfig_ThresholdsMode" json:"mode,omitempty"`
	Steps []*Threshold                    `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *ThresholdsConfig) Reset() {
	*x = ThresholdsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThresholdsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThresholdsConfig) ProtoMessage() {}

func (x *ThresholdsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThresholdsConfig.ProtoReflect.Descriptor instead.
func (*ThresholdsConfig) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{16}
}

func (x *ThresholdsConfig) GetMode() ThresholdsConfig_ThresholdsMode {
	if x != nil {
		return x.Mode
	}
	return ThresholdsConfig_INVALID
}

func (x *ThresholdsConfig) GetSteps() []*Threshold {
	if x != nil {
		return x.Steps
	}
	return nil
}

type ValueMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Selector:
	//
	//	*ValueMapping_ValueMap
	//	*ValueMapping_RangeMap
	//	*ValueMapping_RegexMap
	//	*ValueMapping_SpecialValueMap
	Selector isValueMapping_Selector `protobuf_oneof:"selector"`
}

func (x *ValueMapping) Reset() {
	*x = ValueMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueMapping) ProtoMessage() {}

func (x *ValueMapping) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueMapping.ProtoReflect.Descriptor instead.
func (*ValueMapping) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{17}
}

func (m *ValueMapping) GetSelector() isValueMapping_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (x *ValueMapping) GetValueMap() *ValueMap {
	if x, ok := x.GetSelector().(*ValueMapping_ValueMap); ok {
		return x.ValueMap
	}
	return nil
}

func (x *ValueMapping) GetRangeMap() *RangeMap {
	if x, ok := x.GetSelector().(*ValueMapping_RangeMap); ok {
		return x.RangeMap
	}
	return nil
}

func (x *ValueMapping) GetRegexMap() *RegexMap {
	if x, ok := x.GetSelector().(*ValueMapping_RegexMap); ok {
		return x.RegexMap
	}
	return nil
}

func (x *ValueMapping) GetSpecialValueMap() *SpecialValueMap {
	if x, ok := x.GetSelector().(*ValueMapping_SpecialValueMap); ok {
		return x.SpecialValueMap
	}
	return nil
}

type isValueMapping_Selector interface {
	isValueMapping_Selector()
}

type ValueMapping_ValueMap struct {
	ValueMap *ValueMap `protobuf:"bytes,1,opt,name=valueMap,proto3,oneof"`
}

type ValueMapping_RangeMap struct {
	RangeMap *RangeMap `protobuf:"bytes,2,opt,name=rangeMap,proto3,oneof"`
}

type ValueMapping_RegexMap struct {
	RegexMap *RegexMap `protobuf:"bytes,3,opt,name=regexMap,proto3,oneof"`
}

type ValueMapping_SpecialValueMap struct {
	SpecialValueMap *SpecialValueMap `protobuf:"bytes,4,opt,name=specialValueMap,proto3,oneof"`
}

func (*ValueMapping_ValueMap) isValueMapping_Selector() {}

func (*ValueMapping_RangeMap) isValueMapping_Selector() {}

func (*ValueMapping_RegexMap) isValueMapping_Selector() {}

func (*ValueMapping_SpecialValueMap) isValueMapping_Selector() {}

type ValueMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    MappingType                    `protobuf:"varint,1,opt,name=type,proto3,enum=dashboard1.MappingType" json:"type,omitempty"`
	Options map[string]*ValueMappingResult `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ValueMap) Reset() {
	*x = ValueMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueMap) ProtoMessage() {}

func (x *ValueMap) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueMap.ProtoReflect.Descriptor instead.
func (*ValueMap) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{18}
}

func (x *ValueMap) GetType() MappingType {
	if x != nil {
		return x.Type
	}
	return MappingType_MappingType_INVALID
}

func (x *ValueMap) GetOptions() map[string]*ValueMappingResult {
	if x != nil {
		return x.Options
	}
	return nil
}

type RangeMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// note sure what to do with this:
	// type: #MappingType & "regex"
	Type    MappingType       `protobuf:"varint,1,opt,name=type,proto3,enum=dashboard1.MappingType" json:"type,omitempty"`
	Options *RangeMap_Options `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *RangeMap) Reset() {
	*x = RangeMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeMap) ProtoMessage() {}

func (x *RangeMap) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeMap.ProtoReflect.Descriptor instead.
func (*RangeMap) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{19}
}

func (x *RangeMap) GetType() MappingType {
	if x != nil {
		return x.Type
	}
	return MappingType_MappingType_INVALID
}

func (x *RangeMap) GetOptions() *RangeMap_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type RegexMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    MappingType       `protobuf:"varint,1,opt,name=type,proto3,enum=dashboard1.MappingType" json:"type,omitempty"`
	Options *RegexMap_Options `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *RegexMap) Reset() {
	*x = RegexMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexMap) ProtoMessage() {}

func (x *RegexMap) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexMap.ProtoReflect.Descriptor instead.
func (*RegexMap) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{20}
}

func (x *RegexMap) GetType() MappingType {
	if x != nil {
		return x.Type
	}
	return MappingType_MappingType_INVALID
}

func (x *RegexMap) GetOptions() *RegexMap_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type SpecialValueMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    MappingType              `protobuf:"varint,1,opt,name=type,proto3,enum=dashboard1.MappingType" json:"type,omitempty"`
	Options *SpecialValueMap_Options `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *SpecialValueMap) Reset() {
	*x = SpecialValueMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialValueMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialValueMap) ProtoMessage() {}

func (x *SpecialValueMap) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialValueMap.ProtoReflect.Descriptor instead.
func (*SpecialValueMap) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{21}
}

func (x *SpecialValueMap) GetType() MappingType {
	if x != nil {
		return x.Type
	}
	return MappingType_MappingType_INVALID
}

func (x *SpecialValueMap) GetOptions() *SpecialValueMap_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type ValueMappingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  *string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Color *string `protobuf:"bytes,2,opt,name=color,proto3,oneof" json:"color,omitempty"`
	Icon  *string `protobuf:"bytes,3,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	Index *int32  `protobuf:"varint,4,opt,name=index,proto3,oneof" json:"index,omitempty"`
}

func (x *ValueMappingResult) Reset() {
	*x = ValueMappingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueMappingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueMappingResult) ProtoMessage() {}

func (x *ValueMappingResult) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueMappingResult.ProtoReflect.Descriptor instead.
func (*ValueMappingResult) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{22}
}

func (x *ValueMappingResult) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *ValueMappingResult) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *ValueMappingResult) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *ValueMappingResult) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type DataTransformerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Disabled *bool          `protobuf:"varint,2,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
	Filter   *MatcherConfig `protobuf:"bytes,3,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// not sure about options, so starting with "vague blob"
	// // Options to be passed to the transformer
	// // Valid options depend on the transformer id
	// options: _
	Options *DynamicValue `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *DataTransformerConfig) Reset() {
	*x = DataTransformerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTransformerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransformerConfig) ProtoMessage() {}

func (x *DataTransformerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTransformerConfig.ProtoReflect.Descriptor instead.
func (*DataTransformerConfig) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{23}
}

func (x *DataTransformerConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataTransformerConfig) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *DataTransformerConfig) GetFilter() *MatcherConfig {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DataTransformerConfig) GetOptions() *DynamicValue {
	if x != nil {
		return x.Options
	}
	return nil
}

// not sure about this one either
// // Schema for panel targets is specified by datasource
// // plugins. We use a placeholder definition, which the Go
// // schema loader either left open/as-is with the Base
// // variant of the Dashboard and Panel families, or filled
// // with types derived from plugins in the Instance variant.
// // When working directly from CUE, importers can extend this
// // type directly to achieve the same effect.
// #Target: {...}
type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *DynamicValue `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{24}
}

func (x *Target) GetExpr() *DynamicValue {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created     string  `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	Expires     string  `protobuf:"bytes,2,opt,name=expires,proto3" json:"expires,omitempty"`
	External    bool    `protobuf:"varint,3,opt,name=external,proto3" json:"external,omitempty"`
	ExternalUrl string  `protobuf:"bytes,4,opt,name=externalUrl,proto3" json:"externalUrl,omitempty"`
	Id          uint32  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	Key         string  `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	Name        string  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	OrgId       uint32  `protobuf:"varint,8,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Updated     string  `protobuf:"bytes,9,opt,name=updated,proto3" json:"updated,omitempty"`
	Url         *string `protobuf:"bytes,10,opt,name=url,proto3,oneof" json:"url,omitempty"`
	UserId      uint32  `protobuf:"varint,11,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{25}
}

func (x *Snapshot) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Snapshot) GetExpires() string {
	if x != nil {
		return x.Expires
	}
	return ""
}

func (x *Snapshot) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

func (x *Snapshot) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

func (x *Snapshot) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Snapshot) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Snapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Snapshot) GetOrgId() uint32 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *Snapshot) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (x *Snapshot) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Snapshot) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type FieldConfigSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Defaults  *FieldConfig                              `protobuf:"bytes,1,opt,name=defaults,proto3" json:"defaults,omitempty"`
	Overrides []*FieldConfigSource_FieldConfigOverrides `protobuf:"bytes,2,rep,name=overrides,proto3" json:"overrides,omitempty"`
}

func (x *FieldConfigSource) Reset() {
	*x = FieldConfigSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldConfigSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldConfigSource) ProtoMessage() {}

func (x *FieldConfigSource) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldConfigSource.ProtoReflect.Descriptor instead.
func (*FieldConfigSource) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{26}
}

func (x *FieldConfigSource) GetDefaults() *FieldConfig {
	if x != nil {
		return x.Defaults
	}
	return nil
}

func (x *FieldConfigSource) GetOverrides() []*FieldConfigSource_FieldConfigOverrides {
	if x != nil {
		return x.Overrides
	}
	return nil
}

type LibraryPanelRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uid  string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *LibraryPanelRef) Reset() {
	*x = LibraryPanelRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibraryPanelRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibraryPanelRef) ProtoMessage() {}

func (x *LibraryPanelRef) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibraryPanelRef.ProtoReflect.Descriptor instead.
func (*LibraryPanelRef) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{27}
}

func (x *LibraryPanelRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LibraryPanelRef) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type MatcherConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// another unclear (to me) blob:
	// // The matcher options. This is specific to the matcher
	// implementation. options?: _ @grafanamaturity(NeedsExpertReview)
	Options []*DynamicValue `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *MatcherConfig) Reset() {
	*x = MatcherConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatcherConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatcherConfig) ProtoMessage() {}

func (x *MatcherConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatcherConfig.ProtoReflect.Descriptor instead.
func (*MatcherConfig) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{28}
}

func (x *MatcherConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MatcherConfig) GetOptions() []*DynamicValue {
	if x != nil {
		return x.Options
	}
	return nil
}

type DynamicConfigValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *DynamicValue `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *DynamicConfigValue) Reset() {
	*x = DynamicConfigValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicConfigValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicConfigValue) ProtoMessage() {}

func (x *DynamicConfigValue) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicConfigValue.ProtoReflect.Descriptor instead.
func (*DynamicConfigValue) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{29}
}

func (x *DynamicConfigValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DynamicConfigValue) GetValue() *DynamicValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type FieldConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName       *string           `protobuf:"bytes,1,opt,name=displayName,proto3,oneof" json:"displayName,omitempty"`
	DisplayNameFromDS *string           `protobuf:"bytes,2,opt,name=displayNameFromDS,proto3,oneof" json:"displayNameFromDS,omitempty"`
	Description       *string           `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Path              *string           `protobuf:"bytes,4,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Writable          *bool             `protobuf:"varint,5,opt,name=writable,proto3,oneof" json:"writable,omitempty"`
	Filterable        *bool             `protobuf:"varint,6,opt,name=filterable,proto3,oneof" json:"filterable,omitempty"`
	Unit              *string           `protobuf:"bytes,7,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
	Decimals          *int32            `protobuf:"varint,8,opt,name=decimals,proto3,oneof" json:"decimals,omitempty"` // "number" type
	Min               *int32            `protobuf:"varint,9,opt,name=min,proto3,oneof" json:"min,omitempty"`           // "number" type
	Max               *int32            `protobuf:"varint,10,opt,name=max,proto3,oneof" json:"max,omitempty"`          // "number" type
	Mappings          []*ValueMapping   `protobuf:"bytes,11,rep,name=mappings,proto3" json:"mappings,omitempty"`
	Thresholds        *ThresholdsConfig `protobuf:"bytes,12,opt,name=thresholds,proto3,oneof" json:"thresholds,omitempty"`
	Color             *FieldColor       `protobuf:"bytes,13,opt,name=color,proto3,oneof" json:"color,omitempty"`
	Links             []*DynamicValue   `protobuf:"bytes,14,rep,name=links,proto3" json:"links,omitempty"`
	NoValue           *string           `protobuf:"bytes,15,opt,name=noValue,proto3,oneof" json:"noValue,omitempty"`
	// // custom is specified by the FieldConfig field in panel plugin schemas.
	// custom?: {...} @grafanamaturity(NeedsExpertReview)
	Custom *DynamicValue `protobuf:"bytes,16,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (x *FieldConfig) Reset() {
	*x = FieldConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldConfig) ProtoMessage() {}

func (x *FieldConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldConfig.ProtoReflect.Descriptor instead.
func (*FieldConfig) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{30}
}

func (x *FieldConfig) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *FieldConfig) GetDisplayNameFromDS() string {
	if x != nil && x.DisplayNameFromDS != nil {
		return *x.DisplayNameFromDS
	}
	return ""
}

func (x *FieldConfig) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FieldConfig) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FieldConfig) GetWritable() bool {
	if x != nil && x.Writable != nil {
		return *x.Writable
	}
	return false
}

func (x *FieldConfig) GetFilterable() bool {
	if x != nil && x.Filterable != nil {
		return *x.Filterable
	}
	return false
}

func (x *FieldConfig) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *FieldConfig) GetDecimals() int32 {
	if x != nil && x.Decimals != nil {
		return *x.Decimals
	}
	return 0
}

func (x *FieldConfig) GetMin() int32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *FieldConfig) GetMax() int32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *FieldConfig) GetMappings() []*ValueMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

func (x *FieldConfig) GetThresholds() *ThresholdsConfig {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

func (x *FieldConfig) GetColor() *FieldColor {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *FieldConfig) GetLinks() []*DynamicValue {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *FieldConfig) GetNoValue() string {
	if x != nil && x.NoValue != nil {
		return *x.NoValue
	}
	return ""
}

func (x *FieldConfig) GetCustom() *DynamicValue {
	if x != nil {
		return x.Custom
	}
	return nil
}

type RowPanel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // this is hard coded to "row" in cue - should it be
	// PanelType? Or omitted? (implied by the message name)
	Collapsed  bool           `protobuf:"varint,2,opt,name=collapsed,proto3" json:"collapsed,omitempty"`
	Title      *string        `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Datasource *DataSourceRef `protobuf:"bytes,4,opt,name=datasource,proto3,oneof" json:"datasource,omitempty"`
	GridPos    *GridPos       `protobuf:"bytes,5,opt,name=gridPos,proto3,oneof" json:"gridPos,omitempty"`
	Id         uint32         `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	Panels     []*Panel       `protobuf:"bytes,7,rep,name=panels,proto3" json:"panels,omitempty"`
	Repeat     *string        `protobuf:"bytes,8,opt,name=repeat,proto3,oneof" json:"repeat,omitempty"`
}

func (x *RowPanel) Reset() {
	*x = RowPanel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowPanel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowPanel) ProtoMessage() {}

func (x *RowPanel) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowPanel.ProtoReflect.Descriptor instead.
func (*RowPanel) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{31}
}

func (x *RowPanel) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RowPanel) GetCollapsed() bool {
	if x != nil {
		return x.Collapsed
	}
	return false
}

func (x *RowPanel) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *RowPanel) GetDatasource() *DataSourceRef {
	if x != nil {
		return x.Datasource
	}
	return nil
}

func (x *RowPanel) GetGridPos() *GridPos {
	if x != nil {
		return x.GridPos
	}
	return nil
}

func (x *RowPanel) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RowPanel) GetPanels() []*Panel {
	if x != nil {
		return x.Panels
	}
	return nil
}

func (x *RowPanel) GetRepeat() string {
	if x != nil && x.Repeat != nil {
		return *x.Repeat
	}
	return ""
}

type GraphPanel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // this is hard coded to "graph" in cue
	Legend *GraphPanel_Legend `protobuf:"bytes,2,opt,name=legend,proto3,oneof" json:"legend,omitempty"`
}

func (x *GraphPanel) Reset() {
	*x = GraphPanel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphPanel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphPanel) ProtoMessage() {}

func (x *GraphPanel) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphPanel.ProtoReflect.Descriptor instead.
func (*GraphPanel) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{32}
}

func (x *GraphPanel) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GraphPanel) GetLegend() *GraphPanel_Legend {
	if x != nil {
		return x.Legend
	}
	return nil
}

// Deprecated: Marked as deprecated in dashboard/dashboard1.0.proto.
type HeatmapPanel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // this is hard coded to "heatmap" in cue
}

func (x *HeatmapPanel) Reset() {
	*x = HeatmapPanel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeatmapPanel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeatmapPanel) ProtoMessage() {}

func (x *HeatmapPanel) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeatmapPanel.ProtoReflect.Descriptor instead.
func (*HeatmapPanel) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{33}
}

func (x *HeatmapPanel) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Dashboard_Templating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*VariableModel `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Dashboard_Templating) Reset() {
	*x = Dashboard_Templating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dashboard_Templating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dashboard_Templating) ProtoMessage() {}

func (x *Dashboard_Templating) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dashboard_Templating.ProtoReflect.Descriptor instead.
func (*Dashboard_Templating) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Dashboard_Templating) GetList() []*VariableModel {
	if x != nil {
		return x.List
	}
	return nil
}

type AnnotationContainer_AnnotationQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Datasource *DataSourceRef         `protobuf:"bytes,2,opt,name=datasource,proto3" json:"datasource,omitempty"`
	Enable     bool                   `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
	Hide       *bool                  `protobuf:"varint,4,opt,name=hide,proto3,oneof" json:"hide,omitempty"`
	IconColor  string                 `protobuf:"bytes,5,opt,name=iconColor,proto3" json:"iconColor,omitempty"`
	Filter     *AnnotationPanelFilter `protobuf:"bytes,6,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	Target     *AnnotationTarget      `protobuf:"bytes,7,opt,name=target,proto3,oneof" json:"target,omitempty"`
	Type       *string                `protobuf:"bytes,8,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// unrealistically modeling an actual change
	DatasourceStr string `protobuf:"bytes,9,opt,name=datasource_str,json=datasourceStr,proto3" json:"datasource_str,omitempty"`
}

func (x *AnnotationContainer_AnnotationQuery) Reset() {
	*x = AnnotationContainer_AnnotationQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationContainer_AnnotationQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationContainer_AnnotationQuery) ProtoMessage() {}

func (x *AnnotationContainer_AnnotationQuery) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationContainer_AnnotationQuery.ProtoReflect.Descriptor instead.
func (*AnnotationContainer_AnnotationQuery) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{9, 0}
}

func (x *AnnotationContainer_AnnotationQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AnnotationContainer_AnnotationQuery) GetDatasource() *DataSourceRef {
	if x != nil {
		return x.Datasource
	}
	return nil
}

func (x *AnnotationContainer_AnnotationQuery) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *AnnotationContainer_AnnotationQuery) GetHide() bool {
	if x != nil && x.Hide != nil {
		return *x.Hide
	}
	return false
}

func (x *AnnotationContainer_AnnotationQuery) GetIconColor() string {
	if x != nil {
		return x.IconColor
	}
	return ""
}

func (x *AnnotationContainer_AnnotationQuery) GetFilter() *AnnotationPanelFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *AnnotationContainer_AnnotationQuery) GetTarget() *AnnotationTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *AnnotationContainer_AnnotationQuery) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *AnnotationContainer_AnnotationQuery) GetDatasourceStr() string {
	if x != nil {
		return x.DatasourceStr
	}
	return ""
}

type VariableModel_VariableOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selected *bool `protobuf:"varint,1,opt,name=selected,proto3,oneof" json:"selected,omitempty"`
	// note sure about convering this cue statement: text can be a string or
	// list text: string | [...string]
	Text  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VariableModel_VariableOption) Reset() {
	*x = VariableModel_VariableOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableModel_VariableOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableModel_VariableOption) ProtoMessage() {}

func (x *VariableModel_VariableOption) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableModel_VariableOption.ProtoReflect.Descriptor instead.
func (*VariableModel_VariableOption) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{10, 0}
}

func (x *VariableModel_VariableOption) GetSelected() bool {
	if x != nil && x.Selected != nil {
		return *x.Selected
	}
	return false
}

func (x *VariableModel_VariableOption) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *VariableModel_VariableOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RangeMap_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   float64             `protobuf:"fixed64,1,opt,name=from,proto3" json:"from,omitempty"`
	To     float64             `protobuf:"fixed64,2,opt,name=to,proto3" json:"to,omitempty"`
	Result *ValueMappingResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RangeMap_Options) Reset() {
	*x = RangeMap_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeMap_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeMap_Options) ProtoMessage() {}

func (x *RangeMap_Options) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeMap_Options.ProtoReflect.Descriptor instead.
func (*RangeMap_Options) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{19, 0}
}

func (x *RangeMap_Options) GetFrom() float64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *RangeMap_Options) GetTo() float64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *RangeMap_Options) GetResult() *ValueMappingResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type RegexMap_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern string              `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Result  *ValueMappingResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RegexMap_Options) Reset() {
	*x = RegexMap_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexMap_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexMap_Options) ProtoMessage() {}

func (x *RegexMap_Options) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexMap_Options.ProtoReflect.Descriptor instead.
func (*RegexMap_Options) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{20, 0}
}

func (x *RegexMap_Options) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *RegexMap_Options) GetResult() *ValueMappingResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type SpecialValueMap_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match  SpecialValueMap_SpecialValueMatch `protobuf:"varint,1,opt,name=match,proto3,enum=dashboard1.SpecialValueMap_SpecialValueMatch" json:"match,omitempty"`
	Result *ValueMappingResult               `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SpecialValueMap_Options) Reset() {
	*x = SpecialValueMap_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialValueMap_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialValueMap_Options) ProtoMessage() {}

func (x *SpecialValueMap_Options) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialValueMap_Options.ProtoReflect.Descriptor instead.
func (*SpecialValueMap_Options) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{21, 0}
}

func (x *SpecialValueMap_Options) GetMatch() SpecialValueMap_SpecialValueMatch {
	if x != nil {
		return x.Match
	}
	return SpecialValueMap_SpecialValueMatch_INVALID
}

func (x *SpecialValueMap_Options) GetResult() *ValueMappingResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type FieldConfigSource_FieldConfigOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matcher    *MatcherConfig        `protobuf:"bytes,1,opt,name=matcher,proto3" json:"matcher,omitempty"`
	Properties []*DynamicConfigValue `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *FieldConfigSource_FieldConfigOverrides) Reset() {
	*x = FieldConfigSource_FieldConfigOverrides{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldConfigSource_FieldConfigOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldConfigSource_FieldConfigOverrides) ProtoMessage() {}

func (x *FieldConfigSource_FieldConfigOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldConfigSource_FieldConfigOverrides.ProtoReflect.Descriptor instead.
func (*FieldConfigSource_FieldConfigOverrides) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{26, 0}
}

func (x *FieldConfigSource_FieldConfigOverrides) GetMatcher() *MatcherConfig {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *FieldConfigSource_FieldConfigOverrides) GetProperties() []*DynamicConfigValue {
	if x != nil {
		return x.Properties
	}
	return nil
}

type GraphPanel_Legend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Show     bool    `protobuf:"varint,1,opt,name=show,proto3" json:"show,omitempty"`
	Sort     *string `protobuf:"bytes,2,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	SortDesc *bool   `protobuf:"varint,3,opt,name=sortDesc,proto3,oneof" json:"sortDesc,omitempty"`
}

func (x *GraphPanel_Legend) Reset() {
	*x = GraphPanel_Legend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard1_0_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphPanel_Legend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphPanel_Legend) ProtoMessage() {}

func (x *GraphPanel_Legend) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard1_0_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphPanel_Legend.ProtoReflect.Descriptor instead.
func (*GraphPanel_Legend) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard1_0_proto_rawDescGZIP(), []int{32, 0}
}

func (x *GraphPanel_Legend) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *GraphPanel_Legend) GetSort() string {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return ""
}

func (x *GraphPanel_Legend) GetSortDesc() bool {
	if x != nil && x.SortDesc != nil {
		return *x.SortDesc
	}
	return false
}

var File_dashboard_dashboard1_0_proto protoreflect.FileDescriptor

var file_dashboard_dashboard1_0_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x0c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6a, 0x73, 0x6f,
	0x6e, 0x22, 0xa4, 0x0a, 0x0a, 0x09, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x04, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x67, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x06, 0x67, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x0c,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x08, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x66, 0x69, 0x73,
	0x63, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x14, 0x66, 0x69, 0x73, 0x63, 0x61,
	0x6c, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x77, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x77, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x0f, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x48, 0x10, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x11, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x12, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x13, 0x52, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x3b, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x75, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x67, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x70,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c,
	0x59, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x77, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77,
	0x65, 0x65, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x53, 0x79, 0x6e, 0x63,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x22, 0x39, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x66, 0x66, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x10, 0x03, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x74, 0x6f, 0x22, 0xb2, 0x02, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x57,
	0x0a, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2a, 0xfa, 0x42, 0x27, 0x92, 0x01,
	0x24, 0x22, 0x22, 0x72, 0x20, 0x32, 0x1e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c,
	0x32, 0x7d, 0x28, 0x6d, 0x73, 0x7c, 0x73, 0x7c, 0x6d, 0x7c, 0x68, 0x7c, 0x64, 0x7c, 0x77, 0x7c,
	0x4d, 0x7c, 0x79, 0x29, 0x24, 0x52, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2a, 0xfa, 0x42, 0x27,
	0x92, 0x01, 0x24, 0x22, 0x22, 0x72, 0x20, 0x32, 0x1e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b,
	0x30, 0x2c, 0x32, 0x7d, 0x28, 0x6d, 0x73, 0x7c, 0x73, 0x7c, 0x6d, 0x7c, 0x68, 0x7c, 0x64, 0x7c,
	0x77, 0x7c, 0x4d, 0x7c, 0x79, 0x29, 0x24, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x31, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x12, 0x33, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31,
	0x2e, 0x52, 0x6f, 0x77, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x77,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x12, 0x3f, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xb0, 0x09,
	0x0a, 0x05, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x48, 0x05,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x07, 0x67, 0x72, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x47, 0x72,
	0x69, 0x64, 0x50, 0x6f, 0x73, 0x48, 0x06, 0x52, 0x07, 0x67, 0x72, 0x69, 0x64, 0x50, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x52, 0x03, 0x68, 0x2c, 0x76, 0x48, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a,
	0x52, 0x0d, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0c, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x48, 0x0e, 0x52, 0x0c, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x0f, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x67, 0x72, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x6c, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x54,
	0x0a, 0x15, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x22, 0xef, 0x03, 0x0a, 0x13, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x1a, 0x92, 0x03, 0x0a, 0x0f, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04,
	0x68, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x68, 0x69,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x48, 0x02, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x72, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x98, 0x09, 0x0a, 0x0d, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x69, 0x64, 0x65, 0x52, 0x04, 0x68, 0x69, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x55, 0x72, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x55, 0x72, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x48, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06,
	0x52, 0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48,
	0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x48, 0x07, 0x52, 0x07, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x88, 0x01, 0x01, 0x1a, 0x68, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x22, 0x6b, 0x0a, 0x0c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x10, 0x05, 0x22,
	0x55, 0x0a, 0x0c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x69, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x69, 0x64, 0x65, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x74, 0x68, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x04, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x65, 0x76, 0x65, 0x72,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x6e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x10, 0x03, 0x12,
	0x1d, 0x0a, 0x19, 0x4f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x10, 0x04, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x22, 0x50, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x75, 0x69, 0x64, 0x22, 0xf6, 0x02, 0x0a, 0x0d, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x61,
	0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x56, 0x61, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x56, 0x61, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x3a, 0x0a, 0x11, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x10, 0x02, 0x22, 0xe0, 0x03, 0x0a,
	0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x01,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x88, 0x01, 0x01, 0x22, 0xb0, 0x01,
	0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x63, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x47, 0x72, 0x59, 0x6c,
	0x52, 0x64, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f,
	0x75, 0x73, 0x52, 0x64, 0x59, 0x6c, 0x47, 0x72, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x59, 0x6c, 0x52, 0x64, 0x10, 0x06,
	0x22, 0x51, 0x0a, 0x16, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x10, 0x02, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x22,
	0x88, 0x01, 0x0a, 0x07, 0x47, 0x72, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x15, 0x0a, 0x01, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52,
	0x01, 0x68, 0x12, 0x17, 0x0a, 0x01, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x2a, 0x04, 0x18, 0x18, 0x20, 0x00, 0x52, 0x01, 0x77, 0x12, 0x17, 0x0a, 0x01, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x10, 0x18, 0x28,
	0x00, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x01, 0x79, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x22, 0x37, 0x0a, 0x09, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0x3b, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x10, 0x02, 0x22, 0xff, 0x01, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x08,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70,
	0x48, 0x00, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x08,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x70,
	0x12, 0x47, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xd0, 0x01, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x61, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3b, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5a, 0x0a, 0x0c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31,
	0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x65, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xcc, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x12, 0x2b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4d,
	0x61, 0x70, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x5b, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xfd, 0x02, 0x0a, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x86, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x75, 0x0a, 0x11, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x54, 0x72, 0x75, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x61, 0x6c, 0x73, 0x65,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x4e, 0x61, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x75, 0x6c, 0x6c, 0x41, 0x6e, 0x64,
	0x4e, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x06,
	0x22, 0xa2, 0x01, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xcc, 0x01, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2c,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x99, 0x02, 0x0a,
	0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xa8, 0x02, 0x0a, 0x11, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33,
	0x0a, 0x08, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x1a, 0x8b, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x33,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x0f, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x0d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x63, 0x0a, 0x12, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb8, 0x06, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x44, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x53, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x04, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x07, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x0a, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x0b,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6e, 0x6f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x07, 0x6e,
	0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x44, 0x53, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61,
	0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e,
	0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x22, 0xd3, 0x02, 0x0a, 0x08, 0x52, 0x6f, 0x77, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x48, 0x01, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x67,
	0x72, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x50, 0x6f,
	0x73, 0x48, 0x02, 0x52, 0x07, 0x67, 0x72, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x0a, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x6c, 0x65,
	0x67, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x2e, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x65, 0x67,
	0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x6c, 0x0a, 0x06, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x73, 0x68, 0x6f, 0x77, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x22,
	0x26, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x2a, 0x54, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x67, 0x65, 0x78, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x10, 0x04, 0x42, 0x3d, 0x5a,
	0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x6c, 0x64,
	0x77, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x6d, 0x69, 0x67, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x64, 0x61,
	0x73, 0x68, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dashboard_dashboard1_0_proto_rawDescOnce sync.Once
	file_dashboard_dashboard1_0_proto_rawDescData = file_dashboard_dashboard1_0_proto_rawDesc
)

func file_dashboard_dashboard1_0_proto_rawDescGZIP() []byte {
	file_dashboard_dashboard1_0_proto_rawDescOnce.Do(func() {
		file_dashboard_dashboard1_0_proto_rawDescData = protoimpl.X.CompressGZIP(file_dashboard_dashboard1_0_proto_rawDescData)
	})
	return file_dashboard_dashboard1_0_proto_rawDescData
}

var file_dashboard_dashboard1_0_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_dashboard_dashboard1_0_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_dashboard_dashboard1_0_proto_goTypes = []interface{}{
	(MappingType)(0),                               // 0: dashboard1.MappingType
	(DashboardCursorSync_Value)(0),                 // 1: dashboard1.DashboardCursorSync.Value
	(VariableModel_VariableType)(0),                // 2: dashboard1.VariableModel.VariableType
	(VariableModel_VariableHide)(0),                // 3: dashboard1.VariableModel.VariableHide
	(VariableModel_VariableRefresh)(0),             // 4: dashboard1.VariableModel.VariableRefresh
	(DashboardLink_DashboardLinkType)(0),           // 5: dashboard1.DashboardLink.DashboardLinkType
	(FieldColor_FieldColorModeId)(0),               // 6: dashboard1.FieldColor.FieldColorModeId
	(FieldColor_FieldColorSeriesByMode)(0),         // 7: dashboard1.FieldColor.FieldColorSeriesByMode
	(ThresholdsConfig_ThresholdsMode)(0),           // 8: dashboard1.ThresholdsConfig.ThresholdsMode
	(SpecialValueMap_SpecialValueMatch)(0),         // 9: dashboard1.SpecialValueMap.SpecialValueMatch
	(*DynamicValue)(nil),                           // 10: dashboard1.DynamicValue
	(*Dashboard)(nil),                              // 11: dashboard1.Dashboard
	(*DashboardCursorSync)(nil),                    // 12: dashboard1.DashboardCursorSync
	(*TimeRange)(nil),                              // 13: dashboard1.TimeRange
	(*TimePicker)(nil),                             // 14: dashboard1.TimePicker
	(*PanelType)(nil),                              // 15: dashboard1.PanelType
	(*Panel)(nil),                                  // 16: dashboard1.Panel
	(*AnnotationTarget)(nil),                       // 17: dashboard1.AnnotationTarget
	(*AnnotationPanelFilter)(nil),                  // 18: dashboard1.AnnotationPanelFilter
	(*AnnotationContainer)(nil),                    // 19: dashboard1.AnnotationContainer
	(*VariableModel)(nil),                          // 20: dashboard1.VariableModel
	(*DataSourceRef)(nil),                          // 21: dashboard1.DataSourceRef
	(*DashboardLink)(nil),                          // 22: dashboard1.DashboardLink
	(*FieldColor)(nil),                             // 23: dashboard1.FieldColor
	(*GridPos)(nil),                                // 24: dashboard1.GridPos
	(*Threshold)(nil),                              // 25: dashboard1.Threshold
	(*ThresholdsConfig)(nil),                       // 26: dashboard1.ThresholdsConfig
	(*ValueMapping)(nil),                           // 27: dashboard1.ValueMapping
	(*ValueMap)(nil),                               // 28: dashboard1.ValueMap
	(*RangeMap)(nil),                               // 29: dashboard1.RangeMap
	(*RegexMap)(nil),                               // 30: dashboard1.RegexMap
	(*SpecialValueMap)(nil),                        // 31: dashboard1.SpecialValueMap
	(*ValueMappingResult)(nil),                     // 32: dashboard1.ValueMappingResult
	(*DataTransformerConfig)(nil),                  // 33: dashboard1.DataTransformerConfig
	(*Target)(nil),                                 // 34: dashboard1.Target
	(*Snapshot)(nil),                               // 35: dashboard1.Snapshot
	(*FieldConfigSource)(nil),                      // 36: dashboard1.FieldConfigSource
	(*LibraryPanelRef)(nil),                        // 37: dashboard1.LibraryPanelRef
	(*MatcherConfig)(nil),                          // 38: dashboard1.MatcherConfig
	(*DynamicConfigValue)(nil),                     // 39: dashboard1.DynamicConfigValue
	(*FieldConfig)(nil),                            // 40: dashboard1.FieldConfig
	(*RowPanel)(nil),                               // 41: dashboard1.RowPanel
	(*GraphPanel)(nil),                             // 42: dashboard1.GraphPanel
	(*HeatmapPanel)(nil),                           // 43: dashboard1.HeatmapPanel
	(*Dashboard_Templating)(nil),                   // 44: dashboard1.Dashboard.Templating
	(*AnnotationContainer_AnnotationQuery)(nil),    // 45: dashboard1.AnnotationContainer.AnnotationQuery
	(*VariableModel_VariableOption)(nil),           // 46: dashboard1.VariableModel.VariableOption
	nil,                                            // 47: dashboard1.ValueMap.OptionsEntry
	(*RangeMap_Options)(nil),                       // 48: dashboard1.RangeMap.Options
	(*RegexMap_Options)(nil),                       // 49: dashboard1.RegexMap.Options
	(*SpecialValueMap_Options)(nil),                // 50: dashboard1.SpecialValueMap.Options
	(*FieldConfigSource_FieldConfigOverrides)(nil), // 51: dashboard1.FieldConfigSource.FieldConfigOverrides
	(*GraphPanel_Legend)(nil),                      // 52: dashboard1.GraphPanel.Legend
}
var file_dashboard_dashboard1_0_proto_depIdxs = []int32{
	12, // 0: dashboard1.Dashboard.graphTooltip:type_name -> dashboard1.DashboardCursorSync
	13, // 1: dashboard1.Dashboard.time:type_name -> dashboard1.TimeRange
	14, // 2: dashboard1.Dashboard.timepicker:type_name -> dashboard1.TimePicker
	15, // 3: dashboard1.Dashboard.panels:type_name -> dashboard1.PanelType
	44, // 4: dashboard1.Dashboard.templating:type_name -> dashboard1.Dashboard.Templating
	19, // 5: dashboard1.Dashboard.annotations:type_name -> dashboard1.AnnotationContainer
	22, // 6: dashboard1.Dashboard.links:type_name -> dashboard1.DashboardLink
	35, // 7: dashboard1.Dashboard.snapshot:type_name -> dashboard1.Snapshot
	1,  // 8: dashboard1.DashboardCursorSync.value:type_name -> dashboard1.DashboardCursorSync.Value
	16, // 9: dashboard1.PanelType.panel:type_name -> dashboard1.Panel
	41, // 10: dashboard1.PanelType.row_panel:type_name -> dashboard1.RowPanel
	42, // 11: dashboard1.PanelType.graph_panel:type_name -> dashboard1.GraphPanel
	43, // 12: dashboard1.PanelType.heatmap_panel:type_name -> dashboard1.HeatmapPanel
	34, // 13: dashboard1.Panel.targets:type_name -> dashboard1.Target
	21, // 14: dashboard1.Panel.datasource:type_name -> dashboard1.DataSourceRef
	24, // 15: dashboard1.Panel.gridPos:type_name -> dashboard1.GridPos
	22, // 16: dashboard1.Panel.links:type_name -> dashboard1.DashboardLink
	33, // 17: dashboard1.Panel.transformations:type_name -> dashboard1.DataTransformerConfig
	37, // 18: dashboard1.Panel.libraryPanel:type_name -> dashboard1.LibraryPanelRef
	10, // 19: dashboard1.Panel.options:type_name -> dashboard1.DynamicValue
	45, // 20: dashboard1.AnnotationContainer.list:type_name -> dashboard1.AnnotationContainer.AnnotationQuery
	2,  // 21: dashboard1.VariableModel.type:type_name -> dashboard1.VariableModel.VariableType
	3,  // 22: dashboard1.VariableModel.hide:type_name -> dashboard1.VariableModel.VariableHide
	21, // 23: dashboard1.VariableModel.datasource:type_name -> dashboard1.DataSourceRef
	46, // 24: dashboard1.VariableModel.current:type_name -> dashboard1.VariableModel.VariableOption
	46, // 25: dashboard1.VariableModel.options:type_name -> dashboard1.VariableModel.VariableOption
	4,  // 26: dashboard1.VariableModel.refresh:type_name -> dashboard1.VariableModel.VariableRefresh
	5,  // 27: dashboard1.DashboardLink.type:type_name -> dashboard1.DashboardLink.DashboardLinkType
	6,  // 28: dashboard1.FieldColor.mode:type_name -> dashboard1.FieldColor.FieldColorModeId
	7,  // 29: dashboard1.FieldColor.seriesBy:type_name -> dashboard1.FieldColor.FieldColorSeriesByMode
	8,  // 30: dashboard1.ThresholdsConfig.mode:type_name -> dashboard1.ThresholdsConfig.ThresholdsMode
	25, // 31: dashboard1.ThresholdsConfig.steps:type_name -> dashboard1.Threshold
	28, // 32: dashboard1.ValueMapping.valueMap:type_name -> dashboard1.ValueMap
	29, // 33: dashboard1.ValueMapping.rangeMap:type_name -> dashboard1.RangeMap
	30, // 34: dashboard1.ValueMapping.regexMap:type_name -> dashboard1.RegexMap
	31, // 35: dashboard1.ValueMapping.specialValueMap:type_name -> dashboard1.SpecialValueMap
	0,  // 36: dashboard1.ValueMap.type:type_name -> dashboard1.MappingType
	47, // 37: dashboard1.ValueMap.options:type_name -> dashboard1.ValueMap.OptionsEntry
	0,  // 38: dashboard1.RangeMap.type:type_name -> dashboard1.MappingType
	48, // 39: dashboard1.RangeMap.options:type_name -> dashboard1.RangeMap.Options
	0,  // 40: dashboard1.RegexMap.type:type_name -> dashboard1.MappingType
	49, // 41: dashboard1.RegexMap.options:type_name -> dashboard1.RegexMap.Options
	0,  // 42: dashboard1.SpecialValueMap.type:type_name -> dashboard1.MappingType
	50, // 43: dashboard1.SpecialValueMap.options:type_name -> dashboard1.SpecialValueMap.Options
	38, // 44: dashboard1.DataTransformerConfig.filter:type_name -> dashboard1.MatcherConfig
	10, // 45: dashboard1.DataTransformerConfig.options:type_name -> dashboard1.DynamicValue
	10, // 46: dashboard1.Target.expr:type_name -> dashboard1.DynamicValue
	40, // 47: dashboard1.FieldConfigSource.defaults:type_name -> dashboard1.FieldConfig
	51, // 48: dashboard1.FieldConfigSource.overrides:type_name -> dashboard1.FieldConfigSource.FieldConfigOverrides
	10, // 49: dashboard1.MatcherConfig.options:type_name -> dashboard1.DynamicValue
	10, // 50: dashboard1.DynamicConfigValue.value:type_name -> dashboard1.DynamicValue
	27, // 51: dashboard1.FieldConfig.mappings:type_name -> dashboard1.ValueMapping
	26, // 52: dashboard1.FieldConfig.thresholds:type_name -> dashboard1.ThresholdsConfig
	23, // 53: dashboard1.FieldConfig.color:type_name -> dashboard1.FieldColor
	10, // 54: dashboard1.FieldConfig.links:type_name -> dashboard1.DynamicValue
	10, // 55: dashboard1.FieldConfig.custom:type_name -> dashboard1.DynamicValue
	21, // 56: dashboard1.RowPanel.datasource:type_name -> dashboard1.DataSourceRef
	24, // 57: dashboard1.RowPanel.gridPos:type_name -> dashboard1.GridPos
	16, // 58: dashboard1.RowPanel.panels:type_name -> dashboard1.Panel
	52, // 59: dashboard1.GraphPanel.legend:type_name -> dashboard1.GraphPanel.Legend
	20, // 60: dashboard1.Dashboard.Templating.list:type_name -> dashboard1.VariableModel
	21, // 61: dashboard1.AnnotationContainer.AnnotationQuery.datasource:type_name -> dashboard1.DataSourceRef
	18, // 62: dashboard1.AnnotationContainer.AnnotationQuery.filter:type_name -> dashboard1.AnnotationPanelFilter
	17, // 63: dashboard1.AnnotationContainer.AnnotationQuery.target:type_name -> dashboard1.AnnotationTarget
	32, // 64: dashboard1.ValueMap.OptionsEntry.value:type_name -> dashboard1.ValueMappingResult
	32, // 65: dashboard1.RangeMap.Options.result:type_name -> dashboard1.ValueMappingResult
	32, // 66: dashboard1.RegexMap.Options.result:type_name -> dashboard1.ValueMappingResult
	9,  // 67: dashboard1.SpecialValueMap.Options.match:type_name -> dashboard1.SpecialValueMap.SpecialValueMatch
	32, // 68: dashboard1.SpecialValueMap.Options.result:type_name -> dashboard1.ValueMappingResult
	38, // 69: dashboard1.FieldConfigSource.FieldConfigOverrides.matcher:type_name -> dashboard1.MatcherConfig
	39, // 70: dashboard1.FieldConfigSource.FieldConfigOverrides.properties:type_name -> dashboard1.DynamicConfigValue
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_dashboard_dashboard1_0_proto_init() }
func file_dashboard_dashboard1_0_proto_init() {
	if File_dashboard_dashboard1_0_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dashboard_dashboard1_0_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dashboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardCursorSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimePicker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PanelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Panel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationPanelFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GridPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Threshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThresholdsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegexMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialValueMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueMappingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTransformerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldConfigSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibraryPanelRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatcherConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicConfigValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowPanel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphPanel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeatmapPanel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dashboard_Templating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationContainer_AnnotationQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableModel_VariableOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeMap_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegexMap_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialValueMap_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldConfigSource_FieldConfigOverrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard1_0_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphPanel_Legend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dashboard_dashboard1_0_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*PanelType_Panel)(nil),
		(*PanelType_RowPanel)(nil),
		(*PanelType_GraphPanel)(nil),
		(*PanelType_HeatmapPanel)(nil),
	}
	file_dashboard_dashboard1_0_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ValueMapping_ValueMap)(nil),
		(*ValueMapping_RangeMap)(nil),
		(*ValueMapping_RegexMap)(nil),
		(*ValueMapping_SpecialValueMap)(nil),
	}
	file_dashboard_dashboard1_0_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_dashboard_dashboard1_0_proto_msgTypes[42].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dashboard_dashboard1_0_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dashboard_dashboard1_0_proto_goTypes,
		DependencyIndexes: file_dashboard_dashboard1_0_proto_depIdxs,
		EnumInfos:         file_dashboard_dashboard1_0_proto_enumTypes,
		MessageInfos:      file_dashboard_dashboard1_0_proto_msgTypes,
	}.Build()
	File_dashboard_dashboard1_0_proto = out.File
	file_dashboard_dashboard1_0_proto_rawDesc = nil
	file_dashboard_dashboard1_0_proto_goTypes = nil
	file_dashboard_dashboard1_0_proto_depIdxs = nil
}
